From 0ef79082d12dc4b4265f6691a826c0c784a722ae Mon Sep 17 00:00:00 2001
From: Sam Day <me@samcday.com>
Date: Sun, 4 Oct 2020 22:20:48 +0200
Subject: [PATCH] [qubesd] systemd improvements

 * native journal logging
 * drop manual notify socket handling and use qubes.daemon.notify()
---
 linux/systemd/qubesd.service |  1 -
 qubes/log.py                 | 27 ++++++++++++++++++++++++---
 qubes/tools/qubesd.py        |  9 ++++++---
 qubes/utils.py               | 13 -------------
 4 files changed, 30 insertions(+), 20 deletions(-)

diff --git a/linux/systemd/qubesd.service b/linux/systemd/qubesd.service
index 44711761..40e4779d 100644
--- a/linux/systemd/qubesd.service
+++ b/linux/systemd/qubesd.service
@@ -5,7 +5,6 @@ Before=systemd-user-sessions.service
 [Service]
 Type=notify
 ExecStart=/usr/bin/qubesd
-StandardOutput=syslog
 KillMode=process
 Restart=on-failure
 RestartSec=1s
diff --git a/qubes/log.py b/qubes/log.py
index 5a0934af..f36918f2 100644
--- a/qubes/log.py
+++ b/qubes/log.py
@@ -29,6 +29,8 @@ import sys
 import fcntl
 
 import dbus
+import systemd.daemon
+from systemd.journal import JournalHandler
 
 FORMAT_CONSOLE = '%(message)s'
 FORMAT_LOG = '%(asctime)s %(message)s'
@@ -92,6 +94,21 @@ def enable():
     if logging.root.handlers:
         return
 
+    def handle_exception(exc_type, exc_value, exc_traceback):
+        if issubclass(exc_type, KeyboardInterrupt):
+            sys.__excepthook__(exc_type, exc_value, exc_traceback)
+            return
+
+        logging.critical("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
+
+    sys.excepthook = handle_exception
+
+    logging.root.setLevel(logging.INFO)
+
+    if systemd.daemon.booted():
+        logging.root.addHandler(JournalHandler(SYSLOG_IDENTIFIER='qubesd'))
+        return
+
     handler_console = logging.StreamHandler(sys.stderr)
     handler_console.setFormatter(formatter_console)
     logging.root.addHandler(handler_console)
@@ -111,7 +128,6 @@ def enable():
     handler_log.setFormatter(formatter_log)
     logging.root.addHandler(handler_log)
 
-    logging.root.setLevel(logging.INFO)
 
 def enable_debug():
     '''Enable debug logging
@@ -122,8 +138,9 @@ def enable_debug():
     enable()
     logging.root.setLevel(logging.DEBUG)
 
-    for handler in logging.root.handlers:
-        handler.setFormatter(formatter_debug)
+    if not systemd.daemon.booted():
+        for handler in logging.root.handlers:
+            handler.setFormatter(formatter_debug)
 
 def get_vm_logger(vmname):
     '''Initialise logging for particular VM name
@@ -135,6 +152,10 @@ def get_vm_logger(vmname):
     logger = logging.getLogger('vm.' + vmname)
     if logger.handlers:
         return logger
+
+    if systemd.daemon.booted():
+        return logger
+
     old_umask = os.umask(0o007)
     try:
         handler = logging.FileHandler(
diff --git a/qubes/tools/qubesd.py b/qubes/tools/qubesd.py
index 77b74864..c85abc2b 100644
--- a/qubes/tools/qubesd.py
+++ b/qubes/tools/qubesd.py
@@ -5,6 +5,7 @@ import os
 import signal
 
 import libvirtaio
+import systemd.daemon
 
 import qubes
 import qubes.api
@@ -27,6 +28,10 @@ parser.add_argument('--debug', action='store_true', default=False,
          'tracebacks) and also send tracebacks to Admin API clients')
 
 def main(args=None):
+    if systemd.daemon.booted():
+        # If under systemd we can enable logging as early as possible.
+        qubes.log.enable()
+
     loop = asyncio.get_event_loop()
     libvirtaio.virEventRegisterAsyncIOImpl(loop=loop)
     try:
@@ -55,9 +60,7 @@ def main(args=None):
         loop.add_signal_handler(getattr(signal, signame),
             sighandler, loop, signame, servers)
 
-    qubes.utils.systemd_notify()
-    # make sure children will not inherit this
-    os.environ.pop('NOTIFY_SOCKET', None)
+    systemd.daemon.notify('READY=1', True)
 
     try:
         loop.run_forever()
diff --git a/qubes/utils.py b/qubes/utils.py
index b6dd00df..01fa09a3 100644
--- a/qubes/utils.py
+++ b/qubes/utils.py
@@ -26,7 +26,6 @@ import random
 import string
 import os
 import re
-import socket
 import subprocess
 
 import pkg_resources
@@ -165,18 +164,6 @@ def random_string(length=5):
     return ''.join(random.choice(string.ascii_letters + string.digits)
                    for _ in range(length))
 
-def systemd_notify():
-    '''Notify systemd'''
-    nofity_socket = os.getenv('NOTIFY_SOCKET')
-    if not nofity_socket:
-        return
-    if nofity_socket.startswith('@'):
-        nofity_socket = '\0' + nofity_socket[1:]
-    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-    sock.connect(nofity_socket)
-    sock.sendall(b'READY=1')
-    sock.close()
-
 def match_vm_name_with_special(vm, name):
     '''Check if *vm* matches given name, which may be specified as @tag:...
     or @type:...'''
-- 
2.28.0

