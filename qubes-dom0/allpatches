Index: qubes-dom0/src/qubes-core-admin/linux/system-config/Makefile
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/linux/system-config/Makefile
+++ qubes-dom0/src/qubes-core-admin/linux/system-config/Makefile
@@ -1,12 +1,17 @@
+STATEDIR ?= /var/run
+LIBDIR ?= /usr/lib
+
 all:
 	true
 
-install:
+tmpfiles-qubes.conf: tmpfiles-qubes.conf.in
+	cat tmpfiles-qubes.conf.in | sed "s#@STATEDIR@#$(STATEDIR)#" > tmpfiles-qubes.conf
+install: tmpfiles-qubes.conf
 	mkdir -p $(DESTDIR)/etc/xen/scripts
 	cp vif-route-qubes $(DESTDIR)/etc/xen/scripts
 	cp block-snapshot $(DESTDIR)/etc/xen/scripts
 	ln -s block-snapshot $(DESTDIR)/etc/xen/scripts/block-origin
-	install -m 0644 -D tmpfiles-qubes.conf $(DESTDIR)/usr/lib/tmpfiles.d/qubes.conf
+	install -m 0644 -D tmpfiles-qubes.conf $(DESTDIR)$(LIBDIR)/tmpfiles.d/qubes.conf
 	install -d $(DESTDIR)/etc/logrotate.d
 	install -m 0644 logrotate-qubes \
 		$(DESTDIR)/etc/logrotate.d/qubes
Index: qubes-dom0/src/qubes-core-admin/linux/system-config/tmpfiles-qubes.conf.in
===================================================================
--- /dev/null
+++ qubes-dom0/src/qubes-core-admin/linux/system-config/tmpfiles-qubes.conf.in
@@ -0,0 +1,4 @@
+d @STATEDIR@/qubes 2770 root qubes
+f @STATEDIR@/qubes/xl-lock 0660 root qubes
+f @STATEDIR@/qubes/empty 0444 root qubes
+d @STATEDIR@/xen-hotplug 0755 root root
Index: qubes-dom0/src/qubes-core-admin/linux/systemd/qubes-qmemman.socket
===================================================================
--- /dev/null
+++ qubes-dom0/src/qubes-core-admin/linux/systemd/qubes-qmemman.socket
@@ -0,0 +1,6 @@
+[Socket]
+ListenStream=/run/qubes/qmemman.sock
+SocketMode=0600
+
+[Install]
+WantedBy=sockets.target
Index: qubes-dom0/src/qubes-core-admin/qubes/tools/qmemmand.py
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/qubes/tools/qmemmand.py
+++ qubes-dom0/src/qubes-core-admin/qubes/tools/qmemmand.py
@@ -28,6 +28,8 @@ import socket
 import sys
 import threading
 
+import systemd.daemon
+import systemd.journal
 import xen.lowlevel.xs
 
 import qubes.qmemman
@@ -235,27 +237,33 @@ parser.add_argument('--foreground',
 
 
 def main():
+    under_systemd = 'NOTIFY_SOCKET' in os.environ
+
     args = parser.parse_args()
 
-    # setup logging
-    ha_syslog = logging.handlers.SysLogHandler('/dev/log')
-    ha_syslog.setFormatter(
-        logging.Formatter('%(name)s[%(process)d]: %(message)s'))
-    logging.root.addHandler(ha_syslog)
-
-    # leave log for backwards compatibility
-    ha_file = logging.FileHandler(LOG_PATH)
-    ha_file.setFormatter(
-        logging.Formatter('%(asctime)s %(name)s[%(process)d]: %(message)s'))
-    logging.root.addHandler(ha_file)
+    if not under_systemd:
+        # setup logging
+        ha_syslog = logging.handlers.SysLogHandler('/dev/log')
+        ha_syslog.setFormatter(
+            logging.Formatter('%(name)s[%(process)d]: %(message)s'))
+        logging.root.addHandler(ha_syslog)
 
-    if args.foreground:
-        ha_stderr = logging.StreamHandler(sys.stderr)
+        # leave log for backwards compatibility
+        ha_file = logging.FileHandler(LOG_PATH)
         ha_file.setFormatter(
             logging.Formatter('%(asctime)s %(name)s[%(process)d]: %(message)s'))
-        logging.root.addHandler(ha_stderr)
+        logging.root.addHandler(ha_file)
 
-    sys.stdin.close()
+        if args.foreground:
+            ha_stderr = logging.StreamHandler(sys.stderr)
+            ha_file.setFormatter(
+                logging.Formatter('%(asctime)s %(name)s[%(process)d]: %(message)s'))
+            logging.root.addHandler(ha_stderr)
+        sys.stdin.close()
+    else:
+        # Under systemd we use the systemd JournalHandler.
+        logging.root.addHandler(
+            systemd.journal.JournalHandler(SYSLOG_IDENTIFIER="qmemman"))
 
     logging.root.setLevel(parser.get_loglevel_from_verbosity(args))
 
@@ -281,30 +289,31 @@ def main():
         ' CACHE_FACTOR={algo.CACHE_FACTOR}'.format(
             algo=qubes.qmemman.algo))
 
-    try:
-        os.unlink(SOCK_PATH)
-    except:
-        pass
+    server = None
+    systemd_sock = None
+    systemd_listen_fds = systemd.daemon.listen_fds(True)
+    if systemd_listen_fds:
+        log.debug('listening on systemd provided socket')
+        server = socketserver.UnixStreamServer(None, QMemmanReqHandler, False)
+        server.socket = socket.fromfd(
+            systemd_listen_fds[0], socket.AF_UNIX, socket.SOCK_STREAM)
+    else:
+        try:
+            os.unlink(SOCK_PATH)
+        except:
+            pass
 
-    log.debug('instantiating server')
-    os.umask(0)
+        log.debug('instantiating server')
+        os.umask(0)
+
+        server = socketserver.UnixStreamServer(SOCK_PATH, QMemmanReqHandler)
+        os.umask(0o077)
 
     # Initialize the connection to Xen and to XenStore
     system_state.init()
 
-    server = socketserver.UnixStreamServer(SOCK_PATH, QMemmanReqHandler)
-    os.umask(0o077)
-
-    # notify systemd
-    nofity_socket = os.getenv('NOTIFY_SOCKET')
-    if nofity_socket:
-        log.debug('notifying systemd')
-        s = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-        if nofity_socket.startswith('@'):
-            nofity_socket = '\0%s' % nofity_socket[1:]
-        s.connect(nofity_socket)
-        s.sendall(b"READY=1")
-        s.close()
+    if under_systemd:
+        systemd.daemon.notify('READY=1')
 
     threading.Thread(target=server.serve_forever).start()
     XS_Watcher().watch_loop()
Index: qubes-dom0/src/qubes-core-admin/linux/systemd/Makefile
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/linux/systemd/Makefile
+++ qubes-dom0/src/qubes-core-admin/linux/systemd/Makefile
@@ -8,6 +8,7 @@ install:
 	cp qubes-core.service $(DESTDIR)$(UNITDIR)
 	cp qubes-vm@.service $(DESTDIR)$(UNITDIR)
 	cp qubes-qmemman.service $(DESTDIR)$(UNITDIR)
+	cp qubes-qmemman.socket $(DESTDIR)$(UNITDIR)
 	cp qubesd.service $(DESTDIR)$(UNITDIR)
 	install -d $(DESTDIR)$(UNITDIR)/lvm2-pvscan@.service.d
 	install -m 0644 lvm2-pvscan@.service.d_30_qubes.conf \
Index: qubes-dom0/src/qubes-core-admin/linux/systemd/qubes-qmemman.service
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/linux/systemd/qubes-qmemman.service
+++ qubes-dom0/src/qubes-core-admin/linux/systemd/qubes-qmemman.service
@@ -4,7 +4,6 @@ Description=Qubes memory management daem
 [Service]
 Type=notify
 ExecStart=/usr/bin/qmemmand
-StandardOutput=syslog
 
 [Install]
 WantedBy=multi-user.target
Index: qubes-dom0/src/qubes-core-admin/qubes/tools/qubesd.py
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/qubes/tools/qubesd.py
+++ qubes-dom0/src/qubes-core-admin/qubes/tools/qubesd.py
@@ -5,6 +5,7 @@ import os
 import signal
 
 import libvirtaio
+import systemd.daemon
 
 import qubes
 import qubes.api
@@ -27,6 +28,10 @@ parser.add_argument('--debug', action='s
          'tracebacks) and also send tracebacks to Admin API clients')
 
 def main(args=None):
+    if systemd.daemon.booted():
+        # If under systemd we can enable logging as early as possible.
+        qubes.log.enable()
+
     loop = asyncio.get_event_loop()
     libvirtaio.virEventRegisterAsyncIOImpl(loop=loop)
     try:
@@ -55,9 +60,7 @@ def main(args=None):
         loop.add_signal_handler(getattr(signal, signame),
             sighandler, loop, signame, servers)
 
-    qubes.utils.systemd_notify()
-    # make sure children will not inherit this
-    os.environ.pop('NOTIFY_SOCKET', None)
+    systemd.daemon.notify('READY=1', True)
 
     try:
         loop.run_forever()
Index: qubes-dom0/src/qubes-core-admin/qubes/utils.py
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/qubes/utils.py
+++ qubes-dom0/src/qubes-core-admin/qubes/utils.py
@@ -26,7 +26,6 @@ import random
 import string
 import os
 import re
-import socket
 import subprocess
 
 import pkg_resources
@@ -165,18 +164,6 @@ def random_string(length=5):
     return ''.join(random.choice(string.ascii_letters + string.digits)
                    for _ in range(length))
 
-def systemd_notify():
-    '''Notify systemd'''
-    nofity_socket = os.getenv('NOTIFY_SOCKET')
-    if not nofity_socket:
-        return
-    if nofity_socket.startswith('@'):
-        nofity_socket = '\0' + nofity_socket[1:]
-    sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
-    sock.connect(nofity_socket)
-    sock.sendall(b'READY=1')
-    sock.close()
-
 def match_vm_name_with_special(vm, name):
     '''Check if *vm* matches given name, which may be specified as @tag:...
     or @type:...'''
Index: qubes-dom0/src/qubes-core-admin/qubes/log.py
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/qubes/log.py
+++ qubes-dom0/src/qubes-core-admin/qubes/log.py
@@ -29,6 +29,8 @@ import sys
 import fcntl
 
 import dbus
+import systemd.daemon
+from systemd.journal import JournalHandler
 
 FORMAT_CONSOLE = '%(message)s'
 FORMAT_LOG = '%(asctime)s %(message)s'
@@ -92,6 +94,21 @@ def enable():
     if logging.root.handlers:
         return
 
+    def handle_exception(exc_type, exc_value, exc_traceback):
+        if issubclass(exc_type, KeyboardInterrupt):
+            sys.__excepthook__(exc_type, exc_value, exc_traceback)
+            return
+
+        logging.critical("Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback))
+
+    sys.excepthook = handle_exception
+
+    logging.root.setLevel(logging.INFO)
+
+    if systemd.daemon.booted():
+        logging.root.addHandler(JournalHandler(SYSLOG_IDENTIFIER='qubesd'))
+        return
+
     handler_console = logging.StreamHandler(sys.stderr)
     handler_console.setFormatter(formatter_console)
     logging.root.addHandler(handler_console)
@@ -111,7 +128,6 @@ def enable():
     handler_log.setFormatter(formatter_log)
     logging.root.addHandler(handler_log)
 
-    logging.root.setLevel(logging.INFO)
 
 def enable_debug():
     '''Enable debug logging
@@ -122,8 +138,9 @@ def enable_debug():
     enable()
     logging.root.setLevel(logging.DEBUG)
 
-    for handler in logging.root.handlers:
-        handler.setFormatter(formatter_debug)
+    if not systemd.daemon.booted():
+        for handler in logging.root.handlers:
+            handler.setFormatter(formatter_debug)
 
 def get_vm_logger(vmname):
     '''Initialise logging for particular VM name
@@ -135,6 +152,10 @@ def get_vm_logger(vmname):
     logger = logging.getLogger('vm.' + vmname)
     if logger.handlers:
         return logger
+
+    if systemd.daemon.booted():
+        return logger
+
     old_umask = os.umask(0o007)
     try:
         handler = logging.FileHandler(
Index: qubes-dom0/src/qubes-core-admin/linux/systemd/qubesd.service
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/linux/systemd/qubesd.service
+++ qubes-dom0/src/qubes-core-admin/linux/systemd/qubesd.service
@@ -5,7 +5,6 @@ Before=systemd-user-sessions.service
 [Service]
 Type=notify
 ExecStart=/usr/bin/qubesd
-StandardOutput=syslog
 KillMode=process
 Restart=on-failure
 RestartSec=1s
Index: qubes-dom0/src/qubes-core-admin/qubes/vm/__init__.py
===================================================================
--- qubes-dom0.orig/src/qubes-core-admin/qubes/vm/__init__.py
+++ qubes-dom0/src/qubes-core-admin/qubes/vm/__init__.py
@@ -420,7 +420,9 @@ class BaseVM(qubes.PropertyHolder):
             self._qdb_connection_watch.close()
 
         import qubesdb  # pylint: disable=import-error
-        self._qdb_connection_watch = qubesdb.QubesDB(self.name)
+        self.log.debug('Opening QubesDB %s', self.name)
+        self._qdb_connection_watch = (qubesdb.QubesDB)(
+            *([self.name] if self.name != 'dom0' else []))
         if loop is None:
             loop = asyncio.get_event_loop()
         loop.add_reader(self._qdb_connection_watch.watch_fd(),
